/* tslint:disable */
/* eslint-disable */
/**
 * Venuely Booking Widget Api
 * Api collection for making a booking
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateReservationRequest,
  TimeSlotProvider,
  Venue,
} from '../models/index';
import {
    CreateReservationRequestFromJSON,
    CreateReservationRequestToJSON,
    TimeSlotProviderFromJSON,
    TimeSlotProviderToJSON,
    VenueFromJSON,
    VenueToJSON,
} from '../models/index';

export interface CreateReservationOperationRequest {
    createReservationRequest: CreateReservationRequest;
}

export interface GetAvailableSlotsRequest {
    venueId: string;
    serviceIds: Array<string>;
    date: Date;
}

export interface GetVenueDetailsRequest {
    venueId: string;
}

/**
 * 
 */
export class BookingWidgetApi extends runtime.BaseAPI {

    /**
     * Creates a new reservation
     */
    async createReservationRaw(requestParameters: CreateReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createReservationRequest'] == null) {
            throw new runtime.RequiredError(
                'createReservationRequest',
                'Required parameter "createReservationRequest" was null or undefined when calling createReservation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/reservation`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateReservationRequestToJSON(requestParameters['createReservationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a new reservation
     */
    async createReservation(requestParameters: CreateReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createReservationRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a list of slots available for booking
     */
    async getAvailableSlotsRaw(requestParameters: GetAvailableSlotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TimeSlotProvider>>> {
        if (requestParameters['venueId'] == null) {
            throw new runtime.RequiredError(
                'venueId',
                'Required parameter "venueId" was null or undefined when calling getAvailableSlots().'
            );
        }

        if (requestParameters['serviceIds'] == null) {
            throw new runtime.RequiredError(
                'serviceIds',
                'Required parameter "serviceIds" was null or undefined when calling getAvailableSlots().'
            );
        }

        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling getAvailableSlots().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['venueId'] != null) {
            queryParameters['venueId'] = requestParameters['venueId'];
        }

        if (requestParameters['serviceIds'] != null) {
            queryParameters['serviceIds'] = requestParameters['serviceIds'];
        }

        if (requestParameters['date'] != null) {
            queryParameters['date'] = (requestParameters['date'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/slots`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TimeSlotProviderFromJSON));
    }

    /**
     * Retrieves a list of slots available for booking
     */
    async getAvailableSlots(requestParameters: GetAvailableSlotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TimeSlotProvider>> {
        const response = await this.getAvailableSlotsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a venue with basic details
     */
    async getVenueDetailsRaw(requestParameters: GetVenueDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Venue>> {
        if (requestParameters['venueId'] == null) {
            throw new runtime.RequiredError(
                'venueId',
                'Required parameter "venueId" was null or undefined when calling getVenueDetails().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['venueId'] != null) {
            queryParameters['venueId'] = requestParameters['venueId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/venue`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueFromJSON(jsonValue));
    }

    /**
     * Retrieve a venue with basic details
     */
    async getVenueDetails(requestParameters: GetVenueDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Venue> {
        const response = await this.getVenueDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
