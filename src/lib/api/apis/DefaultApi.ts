/* tslint:disable */
/* eslint-disable */
/**
 * Firefly API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BookableResourceAvailability,
  CreateReservationRequest,
  ReservationPost201Response,
  Service,
  VenueGetResponse,
} from '../models/index';
import {
    BookableResourceAvailabilityFromJSON,
    BookableResourceAvailabilityToJSON,
    CreateReservationRequestFromJSON,
    CreateReservationRequestToJSON,
    ReservationPost201ResponseFromJSON,
    ReservationPost201ResponseToJSON,
    ServiceFromJSON,
    ServiceToJSON,
    VenueGetResponseFromJSON,
    VenueGetResponseToJSON,
} from '../models/index';

export interface FrequentservicesGetRequest {
    venueId: string;
}

export interface ReservationPostRequest {
    createReservationRequest: CreateReservationRequest;
}

export interface SlotsGetRequest {
    venueId: string;
    serviceIds: Array<string>;
    date: Date;
}

export interface VenueGetRequest {
    venueId: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get frequently booked services
     */
    async frequentservicesGetRaw(requestParameters: FrequentservicesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Service>>> {
        if (requestParameters['venueId'] == null) {
            throw new runtime.RequiredError(
                'venueId',
                'Required parameter "venueId" was null or undefined when calling frequentservicesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['venueId'] != null) {
            queryParameters['venue_id'] = requestParameters['venueId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/frequentservices`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceFromJSON));
    }

    /**
     * Get frequently booked services
     */
    async frequentservicesGet(requestParameters: FrequentservicesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Service>> {
        const response = await this.frequentservicesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create reservation
     */
    async reservationPostRaw(requestParameters: ReservationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationPost201Response>> {
        if (requestParameters['createReservationRequest'] == null) {
            throw new runtime.RequiredError(
                'createReservationRequest',
                'Required parameter "createReservationRequest" was null or undefined when calling reservationPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/reservation`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateReservationRequestToJSON(requestParameters['createReservationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create reservation
     */
    async reservationPost(requestParameters: ReservationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationPost201Response> {
        const response = await this.reservationPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get available time slots
     */
    async slotsGetRaw(requestParameters: SlotsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BookableResourceAvailability>>> {
        if (requestParameters['venueId'] == null) {
            throw new runtime.RequiredError(
                'venueId',
                'Required parameter "venueId" was null or undefined when calling slotsGet().'
            );
        }

        if (requestParameters['serviceIds'] == null) {
            throw new runtime.RequiredError(
                'serviceIds',
                'Required parameter "serviceIds" was null or undefined when calling slotsGet().'
            );
        }

        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling slotsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['venueId'] != null) {
            queryParameters['venue_id'] = requestParameters['venueId'];
        }

        if (requestParameters['serviceIds'] != null) {
            queryParameters['service_ids'] = requestParameters['serviceIds'];
        }

        if (requestParameters['date'] != null) {
            queryParameters['date'] = (requestParameters['date'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/slots`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BookableResourceAvailabilityFromJSON));
    }

    /**
     * Get available time slots
     */
    async slotsGet(requestParameters: SlotsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BookableResourceAvailability>> {
        const response = await this.slotsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a venue with services
     */
    async venueGetRaw(requestParameters: VenueGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueGetResponse>> {
        if (requestParameters['venueId'] == null) {
            throw new runtime.RequiredError(
                'venueId',
                'Required parameter "venueId" was null or undefined when calling venueGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['venueId'] != null) {
            queryParameters['venueId'] = requestParameters['venueId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/venue`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueGetResponseFromJSON(jsonValue));
    }

    /**
     * Get a venue with services
     */
    async venueGet(requestParameters: VenueGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueGetResponse> {
        const response = await this.venueGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
