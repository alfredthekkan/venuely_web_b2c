openapi: 3.0.3
info:
  title: Firefly API
  version: "1.0.0"
servers:
  - url: https://firebase-entrypoint-pfgu2skrmq-uc.a.run.app
    description: Prod
  - url: https://firebase-entrypoint-kfvk76r6nq-uc.a.run.app
    description: UAT
  - url: http://localhost:3000
    description: Local Development
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AvailabilitySlot:
      type: object
      properties:
        start:
          type: string
          format: time
          example: "09:00"
        end:
          type: string
          format: time
          example: "14:30"
      required: [start, end]
    BookableResourceAvailability:
      type: object
      properties:
        provider_id:
          type: string
        provider_name:
          type: string
        slots:
          type: array
          items:
            $ref: '#/components/schemas/AvailabilitySlot'
      required: [provider_id, provider_name, slots]
    CreateReservationRequest:
      type: object
      properties:
        venue_id: { type: string }
        staff_id: { type: string }
        booking_resource_name: { type: string }
        start_date: { type: string, format: date-time }
        end_date: { type: string, format: date-time }
        service_ids:
          type: array
          items: { type: string }
        status: { type: string, default: "not_confirmed" }
        guest_id: { type: string, nullable: true }
        guest_name: { type: string, default: "No Name" }
        guest_notes: { type: string, nullable: true }
        event_id: { type: string, nullable: true }
      required:
        - venue_id
        - staff_id
        - booking_resource_name
        - start_date
        - end_date
        - service_ids
    CreateVenueRequest:
      type: object
      properties:
        organisationName: { type: string }
        timezoneId: { type: string, example: "Asia/Kolkata" }
        user_id: { type: string, nullable: true }
      required: [organisationName, timezoneId]
    Phone:
      type: object
      properties:
        code: { type: string }
        number: { type: string }
      required: [code, number]
    ContactDetails:
      type: object
      properties:
        address: { type: string }
        name: { type: string }
        phone:
          $ref: '#/components/schemas/Phone'
        timezoneId: { type: string }
      required: [address, name, phone, timezoneId]
    Subscription:
      type: object
      properties:
        analytics: { type: boolean }
        max_guests: { type: integer }
        max_reservations: { type: integer }
        max_stylists: { type: integer }
        plan_id: { type: string }
        plan_name: { type: string }
        status: { type: string }
      required: [analytics, max_guests, max_reservations, max_stylists, plan_id, plan_name, status]
    Usage:
      type: object
      properties:
        guests: { type: integer }
        reservations: { type: integer }
        services: { type: integer }
        stylists: { type: integer }
      required: [guests, reservations, services, stylists]
    Venue:
      type: object
      description: Public venue shape returned by API (sensitive/internal fields omitted)
      properties:
        id: { type: string, nullable: true }
        contactDetails:
          $ref: '#/components/schemas/ContactDetails'
        description: { type: string }
        images:
          type: array
          items: { type: string, format: uri }
        scan_name: { type: string }
        thumbnail: { type: string, format: uri, nullable: true }
      required:
        - contactDetails
        - description
        - images
        - scan_name
    Service:
      type: object
      properties:
        id: { type: string, nullable: true }
        amount: { type: integer }
        durationInMinutes: { type: integer }
        gender: { type: string }
        isFrequentlyBooked: { type: boolean }
        parent_service: { type: string }
        title: { type: string }
      required: [amount, durationInMinutes, gender, isFrequentlyBooked, parent_service, title]
    VenueGetResponse:
      type: object
      properties:
        venue:
          $ref: '#/components/schemas/Venue'
        services:
          type: array
          items: { $ref: '#/components/schemas/Service' }
      required: [venue, services]
  responses:
    BadRequest:
      description: Bad request
    Unauthorized:
      description: Unauthorized
    NotFound:
      description: Not found
    ServerError:
      description: Server error
paths:
  /venue:
    get:
      summary: Get a venue with services
      parameters:
        - in: query
          name: venueId
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/VenueGetResponse' }
        "400": { $ref: '#/components/responses/BadRequest' }
        "404": { $ref: '#/components/responses/NotFound' }
        "500": { $ref: '#/components/responses/ServerError' }
  
  /slots:
    get:
      summary: Get available time slots
      parameters:
        - in: query
          name: venue_id
          required: true
          schema: { type: string }
        - in: query
          name: service_ids
          required: true
          description: Repeat param for multiple services
          schema:
            type: array
            items: { type: string }
          style: form
          explode: true
        - in: query
          name: date
          required: true
          schema: { type: string, format: date }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/BookableResourceAvailability' }
        "400": { $ref: '#/components/responses/BadRequest' }
        "404": { $ref: '#/components/responses/NotFound' }
        "500": { $ref: '#/components/responses/ServerError' }
  
  /reservation:
    post:
      summary: Create reservation
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateReservationRequest' }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservation_id: { type: string }
                required: [reservation_id]
        "400": { $ref: '#/components/responses/BadRequest' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "500": { $ref: '#/components/responses/ServerError' }
  /frequentservices:
    get:
      summary: Get frequently booked services
      parameters:
        - in: query
          name: venue_id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Service' }
        "400": { $ref: '#/components/responses/BadRequest' }
        "500": { $ref: '#/components/responses/ServerError' }
  